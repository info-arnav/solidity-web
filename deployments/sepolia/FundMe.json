{
  "address": "0xd4a606D56CA894F2B4D0Cb212941CB2Bb98A6Edf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_FEED",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "funderToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xde4861ceebb885a0e3e9c5924f7b2335fa75bf5893b39b86a853ff4bdb30a188",
  "receipt": {
    "to": null,
    "from": "0x4a59cd59aF9A4fcad62b96aFC2524AfAC61A4E4C",
    "contractAddress": "0xd4a606D56CA894F2B4D0Cb212941CB2Bb98A6Edf",
    "transactionIndex": 10,
    "gasUsed": "840269",
    "logsBloom": "0x
    "blockHash": "0xff0df902fa25f5552e2cb0cd49a880211817e03918b6fcfa92ddab46707fc731",
    "transactionHash": "0xde4861ceebb885a0e3e9c5924f7b2335fa75bf5893b39b86a853ff4bdb30a188",
    "logs": [],
    "blockNumber": 3633508,
    "cumulativeGasUsed": "2931812",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694aa1769357215de4fac081bf1f309adc325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "96536a1597671fdcf05f177c58fe7c8b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_FEED\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"funderToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/**\\n * @title MockV3Aggregator\\n * @notice Based on the FluxAggregator contract\\n * @notice Use this contract when you need to test\\n * other contract's ability to read data from an\\n * aggregator contract, but how the aggregator got\\n * its answer is unimportant\\n */\\ncontract MockV3Aggregator is AggregatorV2V3Interface {\\n  uint256 public constant override version = 0;\\n\\n  uint8 public override decimals;\\n  int256 public override latestAnswer;\\n  uint256 public override latestTimestamp;\\n  uint256 public override latestRound;\\n\\n  mapping(uint256 => int256) public override getAnswer;\\n  mapping(uint256 => uint256) public override getTimestamp;\\n  mapping(uint256 => uint256) private getStartedAt;\\n\\n  constructor(uint8 _decimals, int256 _initialAnswer) {\\n    decimals = _decimals;\\n    updateAnswer(_initialAnswer);\\n  }\\n\\n  function updateAnswer(int256 _answer) public {\\n    latestAnswer = _answer;\\n    latestTimestamp = block.timestamp;\\n    latestRound++;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = block.timestamp;\\n    getStartedAt[latestRound] = block.timestamp;\\n  }\\n\\n  function updateRoundData(\\n    uint80 _roundId,\\n    int256 _answer,\\n    uint256 _timestamp,\\n    uint256 _startedAt\\n  ) public {\\n    latestRound = _roundId;\\n    latestAnswer = _answer;\\n    latestTimestamp = _timestamp;\\n    getAnswer[latestRound] = _answer;\\n    getTimestamp[latestRound] = _timestamp;\\n    getStartedAt[latestRound] = _startedAt;\\n  }\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\\n  }\\n\\n  function latestRoundData()\\n    external\\n    view\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return (\\n      uint80(latestRound),\\n      getAnswer[latestRound],\\n      getStartedAt[latestRound],\\n      getTimestamp[latestRound],\\n      uint80(latestRound)\\n    );\\n  }\\n\\n  function description() external pure override returns (string memory) {\\n    return \\\"v0.8/tests/MockV3Aggregator.sol\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x7a5ac06d48ad507a441c8de5f813765f3beed7fb47aa88b26ad34c020ea0c644\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PriceConvertor.sol\\\";\\n\\ncontract FundMe{\\n\\n    using PriceConvertor for uint256;\\n\\n    uint256 MINIMUM_PRICE = 50;\\n\\n    address[] public funders;\\n\\n    mapping(address => uint256) public funderToAmount;\\n\\n    address public immutable OWNER;\\n\\n    AggregatorV3Interface public PRICE_FEED;\\n\\n    constructor(address priceFeed){\\n        OWNER = msg.sender;\\n        PRICE_FEED = AggregatorV3Interface(\\n            priceFeed\\n        );\\n    }\\n\\n    function fund() public payable {\\n\\n        require(msg.value.getConversion(PRICE_FEED) >= MINIMUM_PRICE, \\\"Price is too low\\\");\\n\\n        funders.push(msg.sender);\\n\\n        funderToAmount[msg.sender] = msg.value;\\n\\n    }\\n\\n    function withraw() public onlyOwner{\\n\\n        for (uint256 i = 0; i < funders.length; i++){\\n            address funder = funders[i];\\n            funderToAmount[funder] = 0;\\n        }\\n\\n        funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{value:address(this).balance}(\\\"\\\");\\n\\n        require(callSuccess, \\\"Call Failed\\\");\\n\\n    }\\n\\n     fallback() external payable{\\n        fund();\\n    }\\n\\n    receive() external payable{\\n        fund();\\n    }\\n\\n    modifier onlyOwner() {\\n        if(msg.sender != OWNER){\\n            revert(\\\"Not Owner\\\");\\n        }\\n        _;\\n    }\\n\\n}\",\"keccak256\":\"0x8d9667e151bab99eac42e3a3f88010b9cfaee1bbb2f74c0e1f86e72f52609d88\",\"license\":\"MIT\"},\"contracts/PriceConvertor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\\\";\\n\\nlibrary PriceConvertor{\\n    \\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (, int price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversion(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        ethAmount = (ethPrice * ethAmount) / 1e18;\\n        return uint256(ethAmount);\\n    }\\n\\n}\",\"keccak256\":\"0x41dbbd000d333c6118ed45e2ed11d76fe8ef94ddf6a0803c625087efa9e9c0bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052603260005534801561001557600080fd5b50604051610ece380380610ece83398181016040528101906100379190610115565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610142565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e2826100b7565b9050919050565b6100f2816100d7565b81146100fd57600080fd5b50565b60008151905061010f816100e9565b92915050565b60006020828403121561012b5761012a6100b2565b5b600061013984828501610100565b91505092915050565b608051610d6a6101646000396000818161028701526103280152610d6a6000f3fe6080604052600436106100595760003560e01c8063117803e31461007257806331eb318a1461009d5780634407e1e8146100c8578063b60d428814610105578063dc0d3dff1461010f578063e850497a1461014c57610068565b3661006857610066610163565b005b610070610163565b005b34801561007e57600080fd5b50610087610285565b6040516100949190610722565b60405180910390f35b3480156100a957600080fd5b506100b26102a9565b6040516100bf919061079c565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea91906107e8565b6102cf565b6040516100fc919061082e565b60405180910390f35b61010d610163565b005b34801561011b57600080fd5b5061013660048036038101906101319190610875565b6102e7565b6040516101439190610722565b60405180910390f35b34801561015857600080fd5b50610161610326565b005b60005461019b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461057090919063ffffffff16565b10156101dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d3906108ff565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600181815481106102f757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ab9061096b565b60405180910390fd5b60005b600180549050811015610460576000600182815481106103da576103d961098b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610458906109e9565b9150506103b7565b50600067ffffffffffffffff81111561047c5761047b610a31565b5b6040519080825280602002602001820160405280156104aa5781602001602082028036833780820191505090505b50600190805190602001906104c092919061063a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e790610a91565b60006040518083038185875af1925050503d8060008114610524576040519150601f19603f3d011682016040523d82523d6000602084013e610529565b606091505b505090508061056d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056490610af2565b60405180910390fd5b50565b60008061057c836105a9565b9050670de0b6b3a764000084826105939190610b12565b61059d9190610b83565b93508391505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190610c41565b5050509150506402540be400816106329190610cbc565b915050919050565b8280548282559060005260206000209081019282156106b3579160200282015b828111156106b25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061065a565b5b5090506106c091906106c4565b5090565b5b808211156106dd5760008160009055506001016106c5565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061070c826106e1565b9050919050565b61071c81610701565b82525050565b60006020820190506107376000830184610713565b92915050565b6000819050919050565b600061076261075d610758846106e1565b61073d565b6106e1565b9050919050565b600061077482610747565b9050919050565b600061078682610769565b9050919050565b6107968161077b565b82525050565b60006020820190506107b1600083018461078d565b92915050565b600080fd5b6107c581610701565b81146107d057600080fd5b50565b6000813590506107e2816107bc565b92915050565b6000602082840312156107fe576107fd6107b7565b5b600061080c848285016107d3565b91505092915050565b6000819050919050565b61082881610815565b82525050565b6000602082019050610843600083018461081f565b92915050565b61085281610815565b811461085d57600080fd5b50565b60008135905061086f81610849565b92915050565b60006020828403121561088b5761088a6107b7565b5b600061089984828501610860565b91505092915050565b600082825260208201905092915050565b7f507269636520697320746f6f206c6f7700000000000000000000000000000000600082015250565b60006108e96010836108a2565b91506108f4826108b3565b602082019050919050565b60006020820190508181036000830152610918816108dc565b9050919050565b7f4e6f74204f776e65720000000000000000000000000000000000000000000000600082015250565b60006109556009836108a2565b91506109608261091f565b602082019050919050565b6000602082019050818103600083015261098481610948565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f482610815565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a2657610a256109ba565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a7b600083610a60565b9150610a8682610a6b565b600082019050919050565b6000610a9c82610a6e565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610adc600b836108a2565b9150610ae782610aa6565b602082019050919050565b60006020820190508181036000830152610b0b81610acf565b9050919050565b6000610b1d82610815565b9150610b2883610815565b9250828202610b3681610815565b91508282048414831517610b4d57610b4c6109ba565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b8e82610815565b9150610b9983610815565b925082610ba957610ba8610b54565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bd381610bb4565b8114610bde57600080fd5b50565b600081519050610bf081610bca565b92915050565b6000819050919050565b610c0981610bf6565b8114610c1457600080fd5b50565b600081519050610c2681610c00565b92915050565b600081519050610c3b81610849565b92915050565b600080600080600060a08688031215610c5d57610c5c6107b7565b5b6000610c6b88828901610be1565b9550506020610c7c88828901610c17565b9450506040610c8d88828901610c2c565b9350506060610c9e88828901610c2c565b9250506080610caf88828901610be1565b9150509295509295909350565b6000610cc782610bf6565b9150610cd283610bf6565b9250828202610ce081610bf6565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d1857610d176109ba565b5b8282058414831517610d2d57610d2c6109ba565b5b509291505056fea264697066735822122077d4a37c2649a778f87d279f09d5495d068447c17e81cb710e287ea1fdfa4a3764736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c8063117803e31461007257806331eb318a1461009d5780634407e1e8146100c8578063b60d428814610105578063dc0d3dff1461010f578063e850497a1461014c57610068565b3661006857610066610163565b005b610070610163565b005b34801561007e57600080fd5b50610087610285565b6040516100949190610722565b60405180910390f35b3480156100a957600080fd5b506100b26102a9565b6040516100bf919061079c565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea91906107e8565b6102cf565b6040516100fc919061082e565b60405180910390f35b61010d610163565b005b34801561011b57600080fd5b5061013660048036038101906101319190610875565b6102e7565b6040516101439190610722565b60405180910390f35b34801561015857600080fd5b50610161610326565b005b60005461019b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461057090919063ffffffff16565b10156101dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d3906108ff565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b600181815481106102f757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ab9061096b565b60405180910390fd5b60005b600180549050811015610460576000600182815481106103da576103d961098b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080610458906109e9565b9150506103b7565b50600067ffffffffffffffff81111561047c5761047b610a31565b5b6040519080825280602002602001820160405280156104aa5781602001602082028036833780820191505090505b50600190805190602001906104c092919061063a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e790610a91565b60006040518083038185875af1925050503d8060008114610524576040519150601f19603f3d011682016040523d82523d6000602084013e610529565b606091505b505090508061056d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056490610af2565b60405180910390fd5b50565b60008061057c836105a9565b9050670de0b6b3a764000084826105939190610b12565b61059d9190610b83565b93508391505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b9190610c41565b5050509150506402540be400816106329190610cbc565b915050919050565b8280548282559060005260206000209081019282156106b3579160200282015b828111156106b25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061065a565b5b5090506106c091906106c4565b5090565b5b808211156106dd5760008160009055506001016106c5565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061070c826106e1565b9050919050565b61071c81610701565b82525050565b60006020820190506107376000830184610713565b92915050565b6000819050919050565b600061076261075d610758846106e1565b61073d565b6106e1565b9050919050565b600061077482610747565b9050919050565b600061078682610769565b9050919050565b6107968161077b565b82525050565b60006020820190506107b1600083018461078d565b92915050565b600080fd5b6107c581610701565b81146107d057600080fd5b50565b6000813590506107e2816107bc565b92915050565b6000602082840312156107fe576107fd6107b7565b5b600061080c848285016107d3565b91505092915050565b6000819050919050565b61082881610815565b82525050565b6000602082019050610843600083018461081f565b92915050565b61085281610815565b811461085d57600080fd5b50565b60008135905061086f81610849565b92915050565b60006020828403121561088b5761088a6107b7565b5b600061089984828501610860565b91505092915050565b600082825260208201905092915050565b7f507269636520697320746f6f206c6f7700000000000000000000000000000000600082015250565b60006108e96010836108a2565b91506108f4826108b3565b602082019050919050565b60006020820190508181036000830152610918816108dc565b9050919050565b7f4e6f74204f776e65720000000000000000000000000000000000000000000000600082015250565b60006109556009836108a2565b91506109608261091f565b602082019050919050565b6000602082019050818103600083015261098481610948565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109f482610815565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a2657610a256109ba565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a7b600083610a60565b9150610a8682610a6b565b600082019050919050565b6000610a9c82610a6e565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610adc600b836108a2565b9150610ae782610aa6565b602082019050919050565b60006020820190508181036000830152610b0b81610acf565b9050919050565b6000610b1d82610815565b9150610b2883610815565b9250828202610b3681610815565b91508282048414831517610b4d57610b4c6109ba565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b8e82610815565b9150610b9983610815565b925082610ba957610ba8610b54565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bd381610bb4565b8114610bde57600080fd5b50565b600081519050610bf081610bca565b92915050565b6000819050919050565b610c0981610bf6565b8114610c1457600080fd5b50565b600081519050610c2681610c00565b92915050565b600081519050610c3b81610849565b92915050565b600080600080600060a08688031215610c5d57610c5c6107b7565b5b6000610c6b88828901610be1565b9550506020610c7c88828901610c17565b9450506040610c8d88828901610c2c565b9350506060610c9e88828901610c2c565b9250506080610caf88828901610be1565b9150509295509295909350565b6000610cc782610bf6565b9150610cd283610bf6565b9250828202610ce081610bf6565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610d1857610d176109ba565b5b8282058414831517610d2d57610d2c6109ba565b5b509291505056fea264697066735822122077d4a37c2649a778f87d279f09d5495d068447c17e81cb710e287ea1fdfa4a3764736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 317,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "MINIMUM_PRICE",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 320,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 324,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funderToAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 329,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "PRICE_FEED",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}